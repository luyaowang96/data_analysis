一、处理缺失值
* pandas 对象的所有描述性统计默认都不包括缺失数据
1.isnull
检测数据中的缺失值： string_data.isnull()
* python内置的none在对象数组中也可以作为na

2.处理缺失数据的一些方法
dropna -- 根据标签中是否存在缺失值对轴标签做过滤，可通过阈值调节对缺失值的容忍度
fillna -- 用指定值或插值方法（ffill或bfill）填充缺失数据
isnull -- 检测哪些值是缺失的
notnull -- isnull的否定形式

2.1 dropna
(1)对于一个 Series，dropna 返回一个仅 含非空数据和索引值的 Series
from numpy import nan as NA
data = pd.Series([1, NA, 3.5, NA, 7])
data.dropna() # 等价于 data[data.notnull()]

(2)对于 DataFrame 对象,dropna 默认丢弃任何含有缺失值的行
data = pd.DataFrame([[1., 6.5, 3.], [1., NA, NA], [NA, NA, NA], [NA, 6.5, 3.]])
data.dropna()
--传入 how='all'将只丢弃全为 NA 的那些行
data.dropna(how='all')
--丢弃列，设置axis=1
data.dropna(axis=1, how='all')
--剔除指定行 thresh
df = pd.DataFrame(np.random.randn(7, 3))
df.iloc[:4, 1] = NA
df.iloc[:2, 2] = NA
df.dropna(thresh=2) # 剔除第二行之前的数

2.2 fillna
df.fillna(0)
-- 通过字典调用 fillna，对不同的列填充不同的值
df.fillna({1: 0.5, 2: 0})
-- 默认返回新对象，也可以对现有对象进行就地修改
 _ = df.fillna(0, inplace=True)
-- 插值方法
df.fillna(method='ffill')
df.fillna(method='ffill', limit=2) # limit表示可以填充的最大数量

二、数据转换
1.移除重复数据 duplicated
DataFrame 的 duplicated 方法返回一个布尔型 Series，表示各行是否是重复行
-- drop_duplicates 移除重复数组
data.drop_duplicates()
-- 根据选中的列过滤重复项
data.drop_duplicates(['k1'])
-- 指定保留重复项的哪一组数据

2.利用函数映射做数据转换
使用 map 实现元素级的转换
data = pd.DataFrame({'food': ['bacon', 'pulled pork','bacon', 'Pastrami', 'corned beef','Bacon','pastrami', 'honey ham', 'novalox'],
                     'ounces': [4, 3, 12, 6, 7.5, 8, 3, 5,6]})
# 假设想要添加一列表示该肉类食物来源的动物类型
meat_to_animal = {
  'bacon': 'pig',
  'pulled pork': 'pig',
  'pastrami': 'cow',
  'corned beef': 'cow',
  'honey ham': 'pig',
  'nova lox': 'salmon'
}
lowercased = data['food'].str.lower()
data['animal'] = lowercased.map(meat_to_animal)

data['food'].map(lambda x: meat_to_animal[x.lower()]) # 法二报错

3.替换数据
replace 替换数据结构内的某些值
data.replace(-999, np.nan)
data.replace([-999, -1000], np.nan) #一对多
data.replace([-999, -1000], [np.nan, 0]) # 多对多
data.replace({-999: np.nan, -1000: 0}) # 传入的参数也可以是字典

* data.replace 方法与 data.str.replace 不同，后者做的是字符串的元 素级替换

4.重命名轴索引
- map 方法
transform = lambda x: x[:4].upper()
data.index = data.index.map(transform)

- rename 只创建数据集的转换版(而不是修改原始数据)
data.rename(index=str.title, columns=str.upper)
data.rename(index={'OHIO': 'INDIANA'},columns={'three': 'peekaboo'})
* rename也可以对原数据作修改，传入inplace=True即可

5.离散化和面元划分 cut,qcut
将连续数据离散化，划分到各小组中
ages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]
bins = [18, 25, 35, 60, 100]
cats = pd.cut(ages, bins)

cats.codes #ages 对应的组号
cats.categories # 划分区间

pd.value_counts(cats) # 给出区间段对应的计数
* 哪边是闭端可以通过 right=False 进行修改;abels=group_names 设置自己的面元名称
group_names = ['Youth', 'YoungAdult', 'MiddleAged','Senior']
c2 = pd.cut(ages, bins, labels=group_names)
pd.value_counts(c2)

 -- 向 cut 传入面元的数量
 data = np.random.rand(20) 
 pd.cut(data, 4, precision=2) # precision=2，限定小数只有两位
 
* qcut 根据样本分位数对数据进行面元划分
data = np.random.randn(1000)  # Normally distributed
cats = pd.qcut(data, 4)  # Cut into quartiles
pd.value_counts(cats)

传递自定义的分位数
pd.qcut(data, [0, 0.1, 0.5, 0.9, 1.])

6.检测和过滤异常值
data = pd.DataFrame(np.random.randn(1000, 4))
data.describe()
data[(np.abs(data) > 3).any(1)] #用any取出所有绝对值大于3的点
data[np.abs(data) > 3] = np.sign(data) * 3 #将值限制在区间-3 到 3 以内
data.describe()

7.排列和随机采样 permutation
df = pd.DataFrame(np.arange(5 * 4).reshape((5, 4)))
sampler = np.random.permutation(5)
然后基于 iloc 的索引操作或 take 函数中使用该数组

df.take(sampler)
如果不想用替换的方式选取随机子集，可以在 Series 和 DataFrame 上使用 sample 方法
df.sample(n=3)

choices = pd.Series([5, 7, -1, 6, 4])
draws = choices.sample(n=10, replace=True)

8.计算指标/哑变量
将分类变量(categorical variable)转换为“哑变量”或“指标矩阵”。

df = pd.DataFrame({'key': ['b', 'b', 'a', 'c', 'a', 'b'],
   .....:                    'data1': range(6)})
pd.get_dummies(df['key'])
给指标 DataFrame 的列加上一个前缀，以便能够跟其他数据进行合并
dummies = pd.get_dummies(df['key'], prefix='key')
df_with_dummy = df[['data1']].join(dummies)

结合 get_dummies 和诸如 cut 之类的离散化函数:
np.random.seed(12345)
values = np.random.rand(10)
bins = [0, 0.2, 0.4, 0.6, 0.8, 1]
pd.get_dummies(pd.cut(values, bins))

9.字符串操作
- 内置字符串方法：
（1）以逗号分隔的字符串可以用 split 拆分成数段
val = 'a,b,  guido'
val.split(',')
（2）split 常常与 strip 一起使用，以去除空白符(包括换行符)
pieces = [x.strip() for x in val.split(',')]
（3）利用加法，可以将这些子字符串以双冒号分隔符的形式连接起来
 first, second, third = pieces
 first + '::' + second + '::' + third
（4）向字符串 "::"的 join 方法传入一个列表或元组
'::'.join(pieces)
-- 子串定位
（1）检测子串的最佳方式是利用 Python 的 in 关键 字，还可以使用 index 和 find 
 'guido' in val
 val.index(',')
 val.find(':')
⚠️ find 和 index 的区别:如果找不到字符串，index 将会引发一个异常(而不是返回-1)

（2）count 可以返回指定子串的出现次数
val.count(',')
（3）replace 用于将指定模式替换为另一个模式//通过传入空字符串，它也常常用于删除模式:
val.replace(',', '::')
val.replace(',', '')

-- 正则表达
（1）拆分一个字符串，分隔符为数量不定的一组空白符(制表符、空格、换行符等) \s+
import re
text = "foo    bar\t baz  \tqux"
re.split('\s+', text)

（2）用 re.compile 自己编译 regex 以得到一个可重用的 regex 对象
regex = re.compile('\s+')
regex.split(text)

（3）如果只希望得到匹配 regex 的所有模式，则可以使用 findall 方法
regex.findall(text)

⚠️ findall 返回的是字符串中所有的匹配项； search 则只返回第一个匹配项；match 更加严格，它只匹配字符串的首部

（4）sub 方法可以将匹配到的模式替换为指定字符串，并返回所得到的新字符串
对于上面那个 regex，匹配项对象只能告诉我们模式在原字符串中的起始和结束位置
m = regex.search(text)
text[m.start():m.end()]
print(regex.match(text))

10.pandas 的矢量化字符串函数
(1)通过series的 str 属性访问这些方法
data.str.contains('gmail')
 
 
 
 
